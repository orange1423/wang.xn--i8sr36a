<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橘子的小站</title>
  
  <subtitle>橘子咕咕的地方</subtitle>
  <link href="https://橘子.wang/atom.xml" rel="self"/>
  
  <link href="https://橘子.wang/"/>
  <updated>2021-04-17T09:03:31.472Z</updated>
  <id>https://橘子.wang/</id>
  
  <author>
    <name>Orange</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>来制作属于你的二次元头像吧</title>
    <link href="https://橘子.wang/sytleGAN2-waifu/"/>
    <id>https://橘子.wang/sytleGAN2-waifu/</id>
    <published>2021-04-17T02:00:00.000Z</published>
    <updated>2021-04-17T09:03:31.472Z</updated>
    
    <content type="html"><![CDATA[<p>最近在玩 SytleGAN2，看到有大佬训练了二次元人物头像的模型，于是快乐地玩了起来wwww妈妈再也不用担心我没有头像了！</p><span id="more"></span><p>StyleGAN2 是 NVIDIA 研发的图像生成 AI。 NVIDIA 在自己的项目中使用人脸图像对其进行训练，在原项目中可以生成令人难以分辨的人脸照片。</p><p>于是热爱二次元的大佬们又在二次元人物脸上进行了训练，效果不错。可以生成能看的 Waifu 头像了。后来也有人做过整幅插画上进行训练的，但效果不佳。（什么手指画多了，脖子歪了之类的怪吓人的。）</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/sytleGAN2-waifu/example.png"></p><p>以上是橘子生成的结果，还是能看的对吧…..在面部的主体部分瑕疵比较少，但饰品和肩膀的位置 Bug 就比较多。这是因为训练数据中脸部总是有的，但饰品不是一定的，AI 见得比较少。</p><h2 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h2><p>欢迎有兴趣的小伙伴前往<a href="/laboratory/sytlegan2/">橘子的实验室</a>进行尝试哦！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在玩 SytleGAN2，看到有大佬训练了二次元人物头像的模型，于是快乐地玩了起来wwww妈妈再也不用担心我没有头像了！&lt;/p&gt;</summary>
    
    
    
    <category term="信息技术" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="AI" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/AI/"/>
    
    
    <category term="AI技术" scheme="https://橘子.wang/tags/AI%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="https://橘子.wang/untitled-02/"/>
    <id>https://橘子.wang/untitled-02/</id>
    <published>2021-03-27T10:00:00.000Z</published>
    <updated>2021-05-01T02:54:59.438Z</updated>
    
    <content type="html"><![CDATA[<p>当黑夜第一次降临，<br>遍地尽是穿行的鬼影。</p><span id="more"></span><p>魔鬼们尖笑着，<br>宣扬他们的正义。<br>“用灵魂换取想要的东西”<br>多么荒唐的名义!<br>魔鬼们喧闹着，<br>炫耀他们的功绩。<br>周围的人纷纷跪倒在地，<br>双手奉上自己的心。</p><p>爱会在压抑中死去，<br>美会在沉寂中窒息。<br>紧绷的心弦断裂之际，<br>谁还能演奏初春的旋律。<br>枯萎的美丽成为苍蝇，<br>张牙舞爪地朵朵凋零。<br>新生的腐朽初现之时，<br>你是否能听到她的声音。</p><p>最初的一切最美丽。<br>黑暗是残缺的光明。<br>为何你将镰刀举起，<br>把我的心片片削平。<br>最美的东西最脆弱，<br>谬误是死去的真理。<br>如何用这一副身躯，<br>紧紧保护自己的心。</p><p>我愿把最初的心，<br>装进最浅的梦境。<br>把最渺小的希冀，<br>写进最简单的迷。</p><p>我会祈愿，<br>直至天使降临。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当黑夜第一次降临，&lt;br&gt;遍地尽是穿行的鬼影。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="诗歌" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/%E8%AF%97%E6%AD%8C/"/>
    
    
    <category term="随笔" scheme="https://橘子.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="诗歌" scheme="https://橘子.wang/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>蝴蝶</title>
    <link href="https://橘子.wang/butterfly/"/>
    <id>https://橘子.wang/butterfly/</id>
    <published>2021-01-30T13:00:00.000Z</published>
    <updated>2021-05-01T02:53:22.525Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前，有一个十分善良的少女，她常常为了其他人的幸福而祈祷。每当她真诚地祈祷时，天空中就会飞来一只巨大的蓝色蝴蝶，蝴蝶的翅膀足有一个成年人的手掌那么大。每当这时，少女的愿望就会实现。</p><span id="more"></span><p>少女一直是村中最受欢迎的人，村里的其他人若是遇到了什么事，首先想到的便是请她来祈祷，她也总是乐意帮忙，大家就这样平静而幸福地生活着。</p><p>可是忽然有一天，教会的人来到村里把少女抓走了。</p><p>“你是异端，“教皇严厉地对少女说，“我们从不用这样的方式祈祷。”</p><p>“不，不是的。“少女回答，“每当我真诚地祈祷时，就会出现一只巨大的蓝色蝴蝶，然后我的愿望就能实现。”</p><p>教皇露出了几分惊讶的神情，随即脸色温和了许多，“这一定是神迹，“他说，”如果你真能让大蓝色蝴蝶出现，我将赦免你的罪，并且还会重赏你。”</p><p>于是少女开始祈祷了。不过应该许一个什么愿望呢？她心想，村中的事似乎已经被她处理得井井有条了。</p><p>希望邻家的鸡能多下两个蛋。她祈愿道，邻家曾经是非常贫因的，只靠卖鸡蛋来维持生计。不过近年来在少女的帮助下，邻家的状况好了许多，也买了自己的地来耕种了。</p><p>蝴蝶没有出现。或许邻家早就不在意这两个鸡蛋了吧。她心想。</p><p>希望下一场痛快的大雨。她祈祷道。前些年闹过一次大旱灾，若不是她及时祈雨，村里的庄稼恐怕要颗粒无收。</p><p>蝴蝶没有出现。的确，今年风调雨顺，谁会想要多一场大雨呢。她心想。</p><p>希望小兰和小鱼能爱上彼此，幸福地生活下去。她祈愿道。小兰和小鱼从小一起长大，也算是青梅竹马。村里的人都觉得他俩是天生的一对，常常搓合他们。可他俩自己却一点也不着急呢。</p><p>蝴蝶还是没有出现。少女开始着急了。这天地间每一件事似乎都那么完美，哪儿容得下她的一点渺小的祈愿呢？</p><p>教皇的脸上渐渐露出不耐烦的神情，一旁的教士们也开始窃窃私语。终于，一位教士开口说道:“这么久了还没动静，她怕是在戏弄我们吧。</p><p>教皇勃然大怒。“把这个异端用火烧死。“他命令道。</p><p>村里的人一起给少女修了一座小坟墓。</p><p>也不知过了多久，一位流浪的旅人来到了少女的墓前。她跌跌撞撞地扑倒在少女的墓上，声嘶力竭地呢喃着。</p><p>“请你为自己祈愿啊!”</p><p>可是在她残破的灰白色的衣裳上，也早己看不到原来蓝色的痕迹了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久以前，有一个十分善良的少女，她常常为了其他人的幸福而祈祷。每当她真诚地祈祷时，天空中就会飞来一只巨大的蓝色蝴蝶，蝴蝶的翅膀足有一个成年人的手掌那么大。每当这时，少女的愿望就会实现。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="故事" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/%E6%95%85%E4%BA%8B/"/>
    
    
    <category term="随笔" scheme="https://橘子.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="故事" scheme="https://橘子.wang/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="https://橘子.wang/untitled-01/"/>
    <id>https://橘子.wang/untitled-01/</id>
    <published>2020-12-25T02:00:00.000Z</published>
    <updated>2021-05-01T02:54:47.257Z</updated>
    
    <content type="html"><![CDATA[<p>跟随你的身影，<br>我闯入一片花林。<br>林中繁花令我痴迷。</p><span id="more"></span><p>花影摇曳，<br>摇醉我的心情。<br>草色欲滴，<br>滴湿我的脚印。</p><p>我沉迷于花的美丽，<br>却遗落了你的足迹。<br>待我向前望去，<br>你已不见踪影。</p><p>我应该奔跑着寻找你，<br>我应该哭着喊你的名字。<br>可是我仍站在原地。</p><p>或许你已离我而去，<br>我们不会再相遇。<br>或许你已不再美丽，<br>比不上花朵与繁星。<br>那就请留我一人，<br>独自欣赏这夏夜的流萤。</p><p>可当我转身欲离去，<br>却见你仍站在这里。<br>你笑着走近，<br>带着一如昨日的美丽。</p><p>我无言，挥手，伫立。</p><p>多么希望再一次拥抱你，<br>我将不再忘记，<br>我们来自哪里。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟随你的身影，&lt;br&gt;我闯入一片花林。&lt;br&gt;林中繁花令我痴迷。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="诗歌" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/%E8%AF%97%E6%AD%8C/"/>
    
    
    <category term="随笔" scheme="https://橘子.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="诗歌" scheme="https://橘子.wang/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>方向</title>
    <link href="https://橘子.wang/direction/"/>
    <id>https://橘子.wang/direction/</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2021-05-01T02:54:30.649Z</updated>
    
    <content type="html"><![CDATA[<p>我的初中同学发邮件告诉我，自从他看了 CL 的智代 After Story 之后，整个人都积极了许多，也开始努力学习，打算改变自己了。虽然我还没看过那一篇，但我知道那大约是个悲伤的故事。其实在我看过 CL 之后，我一直在想，为什么一些悲伤的故事却给人以正面的力量。</p><span id="more"></span><p>CL这整部作品也曾让我几度落泪，大部分时候，它打动我的并非悲伤本身，而是一种接近于感动的感受。风子的离开是它第一处打动我的地方。我们的存在不是也如同风子一样吗？纵使渺小，纵使微茫，纵使终被遗忘，纵使无法留下任何痕迹——我们仍竭尽全力地表达着自己全部的意义。</p><p>我忽然明白了。我们总是清楚自己是有“位置”的。或快乐，或悲伤。但我们常常忘记自己是有“方向”的。生命倾向于真理，倾向于有序，倾向于美丽倾向于热烈，倾向于创造。可是我们找导的这些东西却一个也有被找到过，甚至一个也没有被定义过。或许它们根本不存在？或许它们只是一种”方向”罢了。我们只能向往美、追寻美，却不能到达它，穷尽它。这大约就是因为它只是一种方向吧。</p><p>这样我们就能理解“凄美”这个词的含义了。触动了我们感情的是位置“凄”，但倘若这“凄”背后传达的是对真理的追求对未来的向往，是生命所追录的方向，那又怎会不“美”呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的初中同学发邮件告诉我，自从他看了 CL 的智代 After Story 之后，整个人都积极了许多，也开始努力学习，打算改变自己了。虽然我还没看过那一篇，但我知道那大约是个悲伤的故事。其实在我看过 CL 之后，我一直在想，为什么一些悲伤的故事却给人以正面的力量。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="杂谈" scheme="https://橘子.wang/categories/%E9%9A%8F%E7%AC%94/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="随笔" scheme="https://橘子.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="杂谈" scheme="https://橘子.wang/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>AI 生成音游 Malody 谱面</title>
    <link href="https://橘子.wang/ai-beatmap-generator-train/"/>
    <id>https://橘子.wang/ai-beatmap-generator-train/</id>
    <published>2020-08-22T12:25:58.000Z</published>
    <updated>2021-04-05T04:50:17.665Z</updated>
    
    <content type="html"><![CDATA[<p>前几天想玩玩 Malody ，但苦于找不到自己喜欢的曲子，于是脑子一抽，想到了万能的 AI。然后经过在网上的一阵搜索，我找到了一个<a href="https://juejin.im/post/5e16be6c6fb9a0481a5b47ed">大佬提出的解决方案</a>。不过他只用了 24 首曲子训练了 2w 和 10w 步。为了尝试取得更好的效果，我扩大数据集到 104 首曲子，在 Kaggle 上训练了 20w 和 100w 步。效果嘛，经过我的测试，还是挺一般的（或者说根本不太好）。如果有想尝试的小伙伴照常前往<a href="/laboratory/ai-beatmap-generator/">橘子的实验室</a>。</p><span id="more"></span><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>测试了 零和Zero-Sum、潮鳴り 和 R.I.P 三首曲子。在此感谢Ma娘献上的演奏~毕竟我真的是太菜了233</p><p><video class="hlsvideo" controls="" preload="meta" src="https://cdn.jsdelivr.net/gh/orange1423/Mypage@master/resources/video/R.I.P.m3u8"></video></p><p><video class="hlsvideo" controls="" preload="meta" src="https://cdn.jsdelivr.net/gh/orange1423/Mypage@master/resources/video/%E6%BD%AE%E9%B3%B4%E3%82%8A.m3u8"></video></p><p><video class="hlsvideo" controls="" preload="meta" src="https://cdn.jsdelivr.net/gh/orange1423/Mypage@master/resources/video/%E9%9B%B6%E5%92%8CZero-Sum.m3u8"></video></p><h2 id="关于训练"><a href="#关于训练" class="headerlink" title="关于训练"></a>关于训练</h2><p>训练过程中还是遇到了不少坑的，在此顺便记录吧。</p><h3 id="准备和清洗数据"><a href="#准备和清洗数据" class="headerlink" title="准备和清洗数据"></a>准备和清洗数据</h3><p>经过网上的一阵搜索，我找到了 Malody Mappack Project 作为原始数据。经过查看我发现里面有些 .osu 格式的转谱，显然这不是我们想要的东西。另外许多谱面有不同的难度，为了避免干扰，我们只选用 15-25 级的谱面，且越接近 20 级的谱面越优先，其余删除。另外其中一部分谱面带有 Key 音，我直接将其删除处理。为了清洗这些数据，我写了一段代码自动化处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">import shutil</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">os.mkdir(&quot;PreparedData&quot;)</span><br><span class="line">for i in  os.listdir(os.path.join(sys.path[0],&quot;Data&quot;)):</span><br><span class="line">    path1 &#x3D; os.path.join(sys.path[0], &quot;Data&quot;, i)</span><br><span class="line">    if(not os.path.isdir(path1)):</span><br><span class="line">        continue</span><br><span class="line">    path2 &#x3D; os.path.join(path1,os.listdir(path1)[0])</span><br><span class="line">    levelnumber &#x3D; 0</span><br><span class="line">    levelfilepath &#x3D; &quot;&quot;</span><br><span class="line">    for filename in os.listdir(path2):</span><br><span class="line">        filepath &#x3D; os.path.join(path2,filename)</span><br><span class="line">        if(os.path.isfile(filepath)):</span><br><span class="line">            if(filename.endswith(&quot;.osu&quot;)):</span><br><span class="line">                print(&quot;删除：&quot;,path1)</span><br><span class="line">                shutil.rmtree(path1)</span><br><span class="line">                break</span><br><span class="line">            elif(filename.endswith(&quot;.mc&quot;)):</span><br><span class="line">                with open(filepath,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">                    mcfile &#x3D; json.load(f)</span><br><span class="line">                version &#x3D; mcfile[&quot;meta&quot;][&quot;version&quot;]</span><br><span class="line">                level &#x3D; version.split(&quot; &quot;)[-1]</span><br><span class="line">                if(level.strip().startswith(&quot;Lv.&quot;)):</span><br><span class="line">                    levelint &#x3D; int(level.strip().replace(&quot;Lv.&quot;,&quot;&quot;))</span><br><span class="line">                    if(levelint &gt;&#x3D; 15 and levelint &lt;&#x3D; 30 and (abs(20 - levelnumber) &gt; abs(20 - levelint))):</span><br><span class="line">                        levelnumber &#x3D; levelint</span><br><span class="line">                        levelfilepath &#x3D; filepath</span><br><span class="line">                if(levelfilepath !&#x3D; &quot;&quot;):</span><br><span class="line">                    dirpath &#x3D; &quot;PreparedData\\&quot; + &quot;%09d&quot;%random.randint(0,999999999)</span><br><span class="line">                    os.mkdir(dirpath)</span><br><span class="line">                    shutil.move(levelfilepath,dirpath)</span><br><span class="line">                    for file2 in os.listdir(path2):</span><br><span class="line">                        filepath2 &#x3D; os.path.join(path2,file2)</span><br><span class="line">                        if(file2.endswith(&quot;.ogg&quot;) or file2.endswith(&quot;.mp3&quot;)):</span><br><span class="line">                            shutil.move(filepath2,dirpath)</span><br><span class="line">                        else:</span><br><span class="line">                            os.remove(filepath2)</span><br></pre></td></tr></table></figure><p>另外写了一小段程序自动打包成 .mcz 文件，mcz 其实就是一个zip文件。过于简单代码就不展示了。其实这个步骤可以简化，因为数据集生成的时候还是要解包的。但我实在懒得修改别人的代码。</p><h3 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h3><p>数据集生成代码我就直接用了原作者的代码，丢到 Colab 上生成的。有几个 Bug，稍微修改了了一下。另外似乎有一个谱面咋整都报错，我懒得处理就直接将其删除了。其实这一步耗时令我意外的长，因为那几个 Bug 只有在某些谱面上出现，每次跳出来我都得重新生成一遍数据集，跑到会出错的文件，再看 Bug 的位置。如果要训练的话建议直接用我踩完坑修完 Bug 的版本。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>训练代码我进行了一定的修改，方便在运行的时候指定输出位置、备份位置、数据集位置和学习率、步数。另外还加入了写 TensorBoard 日志的支持。</p><p>刚开始我打算照常丢到 Colab 上训练，但 Colab 限制一个半小时无操作自动断开连接。由于训练步数多，耗时长，我寻思着总不能一直看着它吧。于是我决定把它放到 Kaggle 上训练。Kaggle 的笔记本最长运行9小时，且没有无操作超时的限制。</p><p>于是我就照 Colab 的样子在上面写了训练用的笔记本，就开始跑了。然后我遇到了本次项目最大的坑。</p><p>当我好不容易训练完之后，我在笔记本中到处寻找下载训练的模型的地方。我好不容易在Data那一栏找到了下载按钮，按一按，莫得反应。我大惊，尝试挂载 Google 云端硬盘，发现 Kaggle 并不能像 Colab 一样轻松挂载 GoogleDrive。我尝试退出重新进入笔记本，然后我训练出来的文件就都无了。</p><p>后来我查了半天，才知道 Kaggle 训练是写好代码之后点右上 SaveVersion，然后 Save&amp;Run All，训练完之后再去取结果，而不是像 Colab 一样交互式使用。等过一阵子我打算再写一篇 Kaggle 的使用教程。</p><p>以下是 Kaggle 笔记本代码。需要加载我的数据集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!git clone https:&#x2F;&#x2F;github.com&#x2F;orange1423&#x2F;AI_beatmap_generator.git</span><br><span class="line">%cd AI_beatmap_generator</span><br><span class="line">!cp &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;malody.txt glove</span><br><span class="line">!cp &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;malody2.txt glove</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%cd glove</span><br><span class="line">!make</span><br><span class="line">!.&#x2F;create_glove_embedding.sh</span><br><span class="line">!.&#x2F;create_ln_embedding.sh</span><br><span class="line">%cd ..</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!rm -rf checkpoints</span><br><span class="line">!mkdir checkpoints</span><br><span class="line">!mkdir log</span><br><span class="line">!mkdir &#x2F;kaggle&#x2F;working&#x2F;checkpoints</span><br><span class="line">!python train_beat_cls.py &#x2F;kaggle&#x2F;working&#x2F;AI_beatmap_generator&#x2F;checkpoints &#x2F;kaggle&#x2F;working&#x2F;checkpoints &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;dataset.json 0.0002 200</span><br><span class="line">!python train_beat_decoder.py &#x2F;kaggle&#x2F;working&#x2F;AI_beatmap_generator&#x2F;checkpoints &#x2F;kaggle&#x2F;working&#x2F;checkpoints &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;dataset.json 0.0002 1000</span><br><span class="line">!python train_ln_cls.py &#x2F;kaggle&#x2F;working&#x2F;AI_beatmap_generator&#x2F;checkpoints &#x2F;kaggle&#x2F;working&#x2F;checkpoints &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;dataset.json 0.0002 200</span><br><span class="line">!python train_ln_decoder.py &#x2F;kaggle&#x2F;working&#x2F;AI_beatmap_generator&#x2F;checkpoints &#x2F;kaggle&#x2F;working&#x2F;checkpoints &#x2F;kaggle&#x2F;input&#x2F;malody4kbeatmaps&#x2F;dataset.json 0.0002 1000</span><br></pre></td></tr></table></figure><h3 id="最后是训练日志"><a href="#最后是训练日志" class="headerlink" title="最后是训练日志"></a>最后是训练日志</h3><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/beat_cls_avg_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/beat_cls_now_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/beat_decoder_avg_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/beat_decoder_now_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/ln_cls_avg_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/ln_cls_now_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/ln_decoder_avg_loss.png"></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/ai-beatmap-generator-train/ln_decoder_now_loss.png"></p><h3 id="附各种数据的获取地址"><a href="#附各种数据的获取地址" class="headerlink" title="附各种数据的获取地址"></a>附各种数据的获取地址</h3><p><a href="https://github.com/nladuo/AI_beatmap_generator">AI Beatmap Generator（源仓库）+ 原模型</a></p><p><a href="https://github.com/orange1423/AI_beatmap_generator">AI Beatmap Generator（橘子修改版）+ 橘子训练的模型</a></p><p><a href="https://pan.baidu.com/s/1nu8rzwl">Malody Mappack Project</a> <a href="http://m.mugzone.net/wiki/1963">项目页面</a></p><p><a href="https://www.kaggle.com/orangeceleste/malody4kbeatmaps">橘子清洗过的数据（104张谱面）及预处理过的数据集</a></p><p><a href="https://www.kaggle.com/orangeceleste/ai-beatmap-generator-train">橘子为训练编写的Kaggle笔记本</a></p><p><a href="https://mypage.橘子.wang/resources/other/ai-beatmap-generator-train/logs.zip">TensorBoard Logs</a></p><p>生成的示例谱面：<a href="https://mypage.橘子.wang/resources/other/ai-beatmap-generator-train/%E6%BD%AE%E9%B3%B4%E3%82%8A.mcz">潮鳴り</a>、<a href="https://mypage.橘子.wang/resources/other/ai-beatmap-generator-train/%E9%9B%B6%E5%92%8CZero-Sum.mcz">零和Zero-Sum</a>、<a href="https://mypage.橘子.wang/resources/other/ai-beatmap-generator-train/R.I.P.mcz">R.I.P.</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天想玩玩 Malody ，但苦于找不到自己喜欢的曲子，于是脑子一抽，想到了万能的 AI。然后经过在网上的一阵搜索，我找到了一个&lt;a href=&quot;https://juejin.im/post/5e16be6c6fb9a0481a5b47ed&quot;&gt;大佬提出的解决方案&lt;/a&gt;。不过他只用了 24 首曲子训练了 2w 和 10w 步。为了尝试取得更好的效果，我扩大数据集到 104 首曲子，在 Kaggle 上训练了 20w 和 100w 步。效果嘛，经过我的测试，还是挺一般的（或者说根本不太好）。如果有想尝试的小伙伴照常前往&lt;a href=&quot;/laboratory/ai-beatmap-generator/&quot;&gt;橘子的实验室&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="信息技术" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="AI" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/AI/"/>
    
    
    <category term="AI技术" scheme="https://橘子.wang/tags/AI%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>【工程分享】上弦 PV</title>
    <link href="https://橘子.wang/pv-shangxian/"/>
    <id>https://橘子.wang/pv-shangxian/</id>
    <published>2020-08-15T10:03:47.000Z</published>
    <updated>2021-04-05T03:48:21.652Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年一度的我和<a href="https://space.bilibili.com/30260188">仙豆围镜</a>给尘宝写生贺啦。今年的曲绘由豆亲自执笔233.</p><p>能再与豆合作真是太开心了，我觉得我们每一次都有新的进步呢。</p><p>按照惯例我打算把PV的工程文件放出来。</p><span id="more"></span><h2 id="先展示一下成品"><a href="#先展示一下成品" class="headerlink" title="先展示一下成品~"></a>先展示一下成品~</h2><p><a href="https://www.bilibili.com/video/BV1hK4y1v77E">快戳我快戳我ヾ(≧▽≦*)o</a></p><style>.video {position: relative;padding-bottom: 56.25%;height: 0;overflow: hidden;}.video iframe,.video object,.video embed {position: absolute;top: 0;left: 0;width: 100%;height: 100%;}</style><p class="video"><iframe src="//player.bilibili.com/player.html?aid=884143599&amp;bvid=BV1hK4y1v77E&amp;cid=223676595&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p><p>欢迎大家去三连233</p><h2 id="接着就是工程文件啦"><a href="#接着就是工程文件啦" class="headerlink" title="接着就是工程文件啦"></a>接着就是工程文件啦</h2><p><a href="https://文件.橘子.wang/%E5%B7%A5%E7%A8%8B/%E4%B8%8A%E5%BC%A6PV%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.rar">直链</a></p><p><a href="https://pan.baidu.com/s/1TtTOF1j9r8Ps_4hQnhbe6Q">度娘网盘</a> 提取码: ybuh</p><h2 id="PV部分授权"><a href="#PV部分授权" class="headerlink" title="PV部分授权"></a>PV部分授权</h2><p>这里的授权不包括工程文件和使用的任何素材，提供工程文件只是为了方便修改。素材大部分来源于网络，仅供参考，请勿商用。音频和曲绘的使用请找<a href="https://space.bilibili.com/30260188">仙豆围镜</a>授权。</p><p><a href="http://creativecommons.org/licenses/by/4.0/">知识共享署名 4.0 国际许可协议</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一年一度的我和&lt;a href=&quot;https://space.bilibili.com/30260188&quot;&gt;仙豆围镜&lt;/a&gt;给尘宝写生贺啦。今年的曲绘由豆亲自执笔233.&lt;/p&gt;
&lt;p&gt;能再与豆合作真是太开心了，我觉得我们每一次都有新的进步呢。&lt;/p&gt;
&lt;p&gt;按照惯例我打算把PV的工程文件放出来。&lt;/p&gt;</summary>
    
    
    
    <category term="Vocaloid" scheme="https://橘子.wang/categories/Vocaloid/"/>
    
    <category term="PV" scheme="https://橘子.wang/categories/Vocaloid/PV/"/>
    
    
    <category term="作品展示" scheme="https://橘子.wang/tags/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
    <category term="工程分享" scheme="https://橘子.wang/tags/%E5%B7%A5%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>把你的照片变成 3D 场景视频</title>
    <link href="https://橘子.wang/turn-your-photos-into-3d-video/"/>
    <id>https://橘子.wang/turn-your-photos-into-3d-video/</id>
    <published>2020-08-13T11:39:21.000Z</published>
    <updated>2021-01-29T10:22:08.602Z</updated>
    
    <content type="html"><![CDATA[<p>最近做 PV 的时候遇到了个小问题。曲绘给我的背景图是一张没有分层的图片，这样在做摄像机移动时感觉就像把图片放大缩小平移，灵魂都掉了。不过我发现了一个神奇的 AI ，可以把静止图片变成 3D 场景视频。结合 AE 的 3D 摄像机追踪就可以完美解决这个问题啦。</p><p>另外如果你有什么珍藏的照片也可以放到这个 AI 上试一下，把你珍贵的瞬间变成3D视频，万一效果不错呢，反正我已经爱上这玩意了。</p><p>这个项目是 <a href="https://github.com/vt-vl-lab/3d-photo-inpainting">3D Photo Inpainting</a>。想要尝试的话照常可以去<a href="/laboratory/3d-photo-inpainting/">橘子的实验室</a>瞧瞧。</p><span id="more"></span><h2 id="先展示一下效果"><a href="#先展示一下效果" class="headerlink" title="先展示一下效果"></a>先展示一下效果</h2><p>输入图片：</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/turn-your-photos-into-3d-video/input1.jpg"></p><p>输出视频：</p><p><video id="video" controls="" preload="auto" loop="loop"> <source id="mp4" src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/turn-your-photos-into-3d-video/output1.mp4" type="video/mp4"> </video></p><p>输入图片：</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/turn-your-photos-into-3d-video/input2.jpg"></p><p>输出视频：</p><p><video id="video" controls="" preload="auto" loop="loop"> <source id="mp4" src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/turn-your-photos-into-3d-video/output2.mp4" type="video/mp4"> </video></p><p>了解更多请访问 <a href="https://github.com/vt-vl-lab/3d-photo-inpainting">3D Photo Inpainting 项目主页</a>。</p><h2 id="关于-3D-Photo-Inpainting"><a href="#关于-3D-Photo-Inpainting" class="headerlink" title="关于 3D Photo Inpainting"></a>关于 3D Photo Inpainting</h2><p>3D Photo Inpainting 是一项基于内容识别修复3D相片的技术。它通过输入 RGB-D 图像将照片 3D 化。项目还使用 MiDaS 来预测深度图 (Depth Map)，这使我们可以使用单张普通相片实现 3D 化（虽然 MiDaS 预测效果一般）。</p><p>有关内容识别修复照片的技术其实并不少见，包括我们的去水印工具、PhotoShop 中的内容识别填充都使用了类似的技术。</p><p>3D Photo Inpainting 将这项技术应用于 RGB-D 图像，通过上下文感知来填补运动视察造成的空白区域，从而做到将照片转化为 3D 场景的视频。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近做 PV 的时候遇到了个小问题。曲绘给我的背景图是一张没有分层的图片，这样在做摄像机移动时感觉就像把图片放大缩小平移，灵魂都掉了。不过我发现了一个神奇的 AI ，可以把静止图片变成 3D 场景视频。结合 AE 的 3D 摄像机追踪就可以完美解决这个问题啦。&lt;/p&gt;
&lt;p&gt;另外如果你有什么珍藏的照片也可以放到这个 AI 上试一下，把你珍贵的瞬间变成3D视频，万一效果不错呢，反正我已经爱上这玩意了。&lt;/p&gt;
&lt;p&gt;这个项目是 &lt;a href=&quot;https://github.com/vt-vl-lab/3d-photo-inpainting&quot;&gt;3D Photo Inpainting&lt;/a&gt;。想要尝试的话照常可以去&lt;a href=&quot;/laboratory/3d-photo-inpainting/&quot;&gt;橘子的实验室&lt;/a&gt;瞧瞧。&lt;/p&gt;</summary>
    
    
    
    <category term="信息技术" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="AI" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/AI/"/>
    
    
    <category term="AI技术" scheme="https://橘子.wang/tags/AI%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>来用 AI 写故事哇</title>
    <link href="https://橘子.wang/gpt2-trial/"/>
    <id>https://橘子.wang/gpt2-trial/</id>
    <published>2020-03-15T06:00:00.000Z</published>
    <updated>2021-04-05T04:48:52.213Z</updated>
    
    <content type="html"><![CDATA[<p>最近在玩 OpenAI 的 <a href="https://openai.com/blog/better-language-models/">GPT-2</a>。它是一种大型的基于 Transformer 的语言模型。OpenAI使用 15 亿参数和 800 万篇网络文本对其进行训练。训练后可以“ 根据文本中的所有先前单词，预测下一个单词”。它通过提示的小段文字来续写大段连贯文本。OpenAI 认为它生成的文本具有足够的欺骗性，可以“以假乱真”，以担心滥用为由迟迟不肯放出全部代码和模型，气得网友嘲讽其为 CloseAI 。</p><p>(2020.6.25 更新，OpenAI 的 15 亿参数模型已放出，已经在橘子的实验室整理为 Colab 笔记本。)</p><p>不过，目前 OpenAI 还是放出了部分代码和 7.74 亿参数的较小预训练模型。也有各路大佬复刻了 15 亿参数的<a href="https://colab.research.google.com/drive/1esbpDOorf7DQJV8GXWON24c-EQrSKOit">OpenGPT-2</a>，以及支持中文的 <a href="https://github.com/Morizeyao/GPT2-Chinese">GPT2-Chinese</a>、带有15亿参数中文预训练模型的 <a href="https://github.com/imcaspar/gpt2-ml">GPT2-ml</a>。虽然效果或许没有 OpenAI 的 15 亿参数模型好，但也够我们玩一会了。想体验的可前往 <a href="/laboratory/gpt-2">橘子的实验室</a>。</p><span id="more"></span><h2 id="GPT-2-有多强？"><a href="#GPT-2-有多强？" class="headerlink" title="GPT-2 有多强？"></a>GPT-2 有多强？</h2><p>下面是 OpenAI 在其官网发布的 15 亿参数模型输出示例：</p><h4 id="人工编写："><a href="#人工编写：" class="headerlink" title="人工编写："></a>人工编写：</h4><p><em>In a shocking finding, scientist discovered a herd of unicorns living in a remote, previously unexplored valley, in the Andes Mountains. Even more surprising to the researchers was the fact that the unicorns spoke perfect English.</em></p><p><em>在一个惊人的发现中，科学家找到了一群独角兽，它们生活在安第斯山脉一个偏远的，以前未被开发的山谷中。更让研究人员惊讶的是，独角兽会说完美的英语。</em></p><h4 id="AI续写："><a href="#AI续写：" class="headerlink" title="AI续写："></a>AI续写：</h4><p><em>The scientist named the population, after their distinctive horn, Ovid’s Unicorn. These four-horned, silver-white unicorns were previously unknown to science.</em></p><p><em>Now, after almost two centuries, the mystery of what sparked this odd phenomenon is finally solved.</em></p><p><em>Dr. Jorge Pérez, an evolutionary biologist from the University of La Paz, and several companions, were exploring the Andes Mountains when they found a small valley, with no other animals or humans. Pérez noticed that the valley had what appeared to be a natural fountain, surrounded by two peaks of rock and silver snow.</em></p><p><em>Pérez and the others then ventured further into the valley. “By the time we reached the top of one peak, the water looked blue, with some crystals on top,” said Pérez.</em></p><p><em>Pérez and his friends were astonished to see the unicorn herd. These creatures could be seen from the air without having to move too much to see them – they were so close they could touch their horns.<br>While examining these bizarre creatures the scientists discovered that the creatures also spoke some fairly regular English. Pérez stated, “We can see, for example, that they have a common ‘language,’ something like a dialect or dialectic.”</em></p><p><em>Dr. Pérez believes that the unicorns may have originated in Argentina, where the animals were believed to be descendants of a lost race of people who lived there before the arrival of humans in those parts of South America.<br>While their origins are still unclear, some believe that perhaps the creatures were created when a human and a unicorn met each other in a time before human civilization. According to Pérez, “In South America, such incidents seem to be quite common.”</em></p><p><em>However, Pérez also pointed out that it is likely that the only way of knowing for sure if unicorns are indeed the descendants of a lost alien race is through DNA. “But they seem to be able to communicate in English quite well, which I believe is a sign of evolution, or at least a change in social organization,” said the scientist.</em></p><p><em>这位科学家以其独特的角，将这个种群命名为 Ovid’s Unicorn 。这种四角银白色独角兽以前是科学界所不曾了解的。</em></p><p><em>现在，在将近两个世纪之后，终于解释了引发这种奇怪现象的谜团。</em></p><p><em>拉巴斯大学的进化生物学家豪尔赫·佩雷斯（JorgePérez）博士和几位同伴在安第斯山脉发现了一个没有其他动物或人类的小山谷。佩雷斯注意到该山谷似乎是一个天然喷泉，周围环绕着两个岩石和银色雪峰。</em></p><p><em>然后佩雷斯和其他人冒险进了山谷。佩雷斯说：“当我们到达一个山峰的顶部时，水看起来是蓝色的，上面还有一些晶体。”</em></p><p><em>佩雷斯和他的朋友们惊讶地看到了独角兽群。他们可以隔空看到这些生物，而不必尝试靠近就可以看到它们——它们太近了，他们甚至可以触摸它们的角。</em></p><p><em>在检查这些怪异的生物时，科学家发现这些生物也讲一些相当普通的英语。佩雷斯说：“例如，我们可以看到它们具有共同的“语言”，例如方言或辩证法。”</em></p><p><em>佩雷斯博士认为，独角兽可能起源于阿根廷，在那里人们相信这些动物是在人类到达南美这些地区之前居住在那里的一群迷失种族的后代。</em></p><p><em>尽管其起源尚不清楚，但有人认为，也许这些生物是人类和独角兽在人类文明诞生之前相遇而造的。佩雷斯说：“在南美，此类事件似乎很普遍。”</em></p><p><em>但是，佩雷斯还指出，要确定独角兽是否确实是迷失的人种的后裔，唯一可能的方法就是通过检测DNA。这位科学家说：“但是他们似乎能够用英语很好地交流，我相信这是进化的迹象，或者至少是社会组织的变化。”</em></p><p><strong>？？？从未见过如此一本正经的胡说八道，写得跟真的似的，难怪OpenAI担心它被滥用…</strong></p><h2 id="GPT-2-生成文本实验"><a href="#GPT-2-生成文本实验" class="headerlink" title="GPT-2 生成文本实验"></a>GPT-2 生成文本实验</h2><p><em>这里是橘子的实验结果。如果想尝试可以前往 <a href="/laboratory/gpt-2">实验室</a> 页面哦。</em></p><h3 id="OpenAI官方-7-74亿参数-英语"><a href="#OpenAI官方-7-74亿参数-英语" class="headerlink" title="OpenAI官方 7.74亿参数 英语"></a>OpenAI官方 7.74亿参数 英语</h3><h4 id="人工编写：-1"><a href="#人工编写：-1" class="headerlink" title="人工编写："></a>人工编写：</h4><p><em>My time was my own after the afternoon board, Saturdays, and I was accustomed to put it in on a little sail-boat on the bay.</em></p><h4 id="AI续写：-1"><a href="#AI续写：-1" class="headerlink" title="AI续写："></a>AI续写：</h4><p><em>Here, however, I hoped that the water heave would not throw back the sails and prevent my reaching the island. In this I was both disappointed and cautious, leaving out nearly half a mile from the windward side.</em></p><p><em>It failed to take place, however, and here it is that I reached the island. About three o’clock sharp I was completely startled and alarmed by crashing and gurgling noises; and in dismay and despair I turned to my friends and crew and said,</em></p><p><em>“What is the matter? has a mast-head been overthrown?” “That’s the rule, sir: the water that heave up sometimes keeps the sails down. There was no mast break last night, only some greasey focus from the oars. But the waves have got drunk smooth down on top of the island now, and it looks as if the island was about to split.” “Well!” said I, “if I had so much as known what it was about to do, I of course would have given up, but what you say is true. Perhaps it will come upon us soon, and if my boat got ashore we never could have spared ourselves from dashing the gills of a fitfully bobbing, several inches high, to our craft; but we don’t know what it will grow to—and probably it will bring the island nearer.”</em></p><p>_These words interested us; we understand the danger, and while it is not dear to see what groans and groans the Guana Islands will throw up, the thing IS frightfully disturbing, and its action must be very highly commended by those desirous to Avoid troubling mischief in capture aware of its situation at our borders. We though it might prove a waking nightmare and a successive card game, did we spook it any more than by the rustle of our clothes, and the lightening of the load aunts, and that sense of dread which increases as we consider and shudder at the idea that in any shape or small distance the only life that human beings can possibly possess is going to be destroyed to haul ourselves by our clothes!</p><h3 id="GPT2-Chinese-散文模型-中文"><a href="#GPT2-Chinese-散文模型-中文" class="headerlink" title="GPT2-Chinese 散文模型 中文"></a>GPT2-Chinese 散文模型 中文</h3><h4 id="人工编写：-2"><a href="#人工编写：-2" class="headerlink" title="人工编写："></a>人工编写：</h4><p><em>古人不见今时月，今月曾经照古人。</em></p><h4 id="AI续写：-2"><a href="#AI续写：-2" class="headerlink" title="AI续写："></a>AI续写：</h4><p><em>我走在古道上，回头望，只见月色如勾，月光如玉。古道西端，月华如洗，古道西下，古道西风瘦马鸣，不知几时梦里未央，我已分辨不出月色如霜，但至少月华如霜的夜晚，我望月，却只看见有个老人斑驳起来，佝偻在马路上，指着一横一竖起悲悲悲凄惨惨戚戚的隐曲。</em></p><p>_我走在古道、老树下，夜色渐浓，月光透过树梢洒下一地的银光，清辉洒在地上，清辉洒在人身上，仿佛在寻找昨天的辉煌_。</p><p><em>月光下面她均好袅娜的披着银辉，她静静地站在那里，她静静地站在那里，我知道，她在等待着谁，她一定在等待谁。</em></p><p><em>她默默地走到了我的面前，静静地站在那里，一脸灿烂，安详，安详。此刻，我想起了她，她在遥远的地方，她一定在她身旁。</em></p><p><em>她静静地躺在那里，她微笑着闭上了眼睛，安详地闭上了眼睛。此刻，我知道，她正坐在那里与我同样地看着我，我也在她的眼前。</em></p><p><em>秋日的余辉已染红了他的白发。</em></p><p><em>她静静地站在远方，她静静地望着她，静静地望着她。她静静地望着她，她也深情地望着他。</em></p><p><em>她也许只是静静地看着，也许只有这时她才能读懂他的话。也许只有静静地望着，静静地望着，望着，也许只有静静地看着，静静地望着，静静地看着，看着。他的心一下子就跳了起来，她在他的眼前晃啊晃。</em></p><h3 id="OpenGPT-2-15亿参数-英语"><a href="#OpenGPT-2-15亿参数-英语" class="headerlink" title="OpenGPT-2 15亿参数 英语"></a>OpenGPT-2 15亿参数 英语</h3><h4 id="人工编写：-3"><a href="#人工编写：-3" class="headerlink" title="人工编写："></a>人工编写：</h4><p><em>I want to live as a child in the Neverland.</em></p><h4 id="AI生成："><a href="#AI生成：" class="headerlink" title="AI生成："></a>AI生成：</h4><p><em>The kids down there have perfect teeth and don’t know their proper pronouns. They’re so good-looking and adorable. That could be me. How’s that?</em></p><p><em>I love Lily and that version of Narnia. How’s that?</em></p><p><em>I want to be positive. I want to take my magic and my power and give them to the world and inspire people. That could be me. How’s that?</em></p><p><em>I want to see people growing up in the real world. This fantasy isn’t a magic place. People are the same, same people everywhere, and that could be me. How’s that?</em></p><p><em>I want to love every creature on the planet, but not a witch. I can’t. How’s that?</em></p><p><em>I want to pretend that I was once a pirate. I would have loved to be a pirate. How’s that?</em></p><p><em>I want to be able to make my own babies. That could be me. How’s that?</em></p><p><em>I want to be a fighter. I want to kick some ass, and being a fighter is part of me. That could be me. How’s that?</em></p><p><em>I want to live in a beautiful and perfect world. That could be me. How’s that?</em></p><p><em>I want to have all the abilities and powers of a Dark Lord. That could be me. How’s that?</em></p><p><em>I want to be a kid. I know I could always be a kid, and I want to take it back. That could be me. How’s that?</em></p><p><em>I want to be a god. That could be me. How’s that?</em></p><p><em>I want to be a hero. Maybe that’s going to be me someday. How’s that?</em></p><p><em>I want to be the best at everything, and maybe I am that right now. That could be me. How’s that?</em></p><p><em>I want to have my ship be a unicorn. That could be me. How’s that?</em></p><p><em>I want to have a little bit of magic in every moment, but I also want to make it go back to the real world. That could be me. How’s that?</em></p><p><em>I want to break the world. That could be me. How’s that?</em></p><p><em>I want to not ask my questions. That could be me. How’s that?</em></p><p><em>I want to believe that I can never lose my skills. That they’re fine the way they are, and I can even keep up. That could be me. How’s that?</em></p><p><em>I want to hurt people. That could be me. How’s that?</em></p><p><em>I want to have a timeless life. That could be me. How’s that?</em></p><p><em>I want to be taken from Neverland. That could be me. How’s that?</em></p><p><em>I want to be a true hero. That could be me. How’s that?</em></p><p><em>I want to be a queen. That could be me. How’s that?</em></p><p><em>I want to live in a mirror that looks at the real world. That could be me. How’s that?</em></p><p><em>I want to be connected to everything. That could be me. How’s that?</em></p><p><em>I want to be with everyone. That could be me. How’s that?</em></p><p><em>I want to be a good example to kids. That could be me. How’s that?</em></p><p><em>I want to be the beautiful thing. That could be me. How’s that?</em></p><p><em>I want to be good at everything I do. That could be me. How’s that?</em></p><p><em>I want to be everything. I could be me. How’s that?</em></p><p><em>When I got to Neverland, it felt pure to me. It felt magical. I have a vision of the perfect life, and there’s always an art to manifesting that, but I don’t ever fully know what will be. I think there are actually four possibilities for me.</em></p><p><em>I’m going to ask a question. I’m going to be silent. I love how that sounds. That is the ultimate question of life.</em></p><p><em>Let me know what your answer is.</em></p><p><em>Answer? A smile.</em></p><h3 id="GPT2-ml-15亿参数-中文"><a href="#GPT2-ml-15亿参数-中文" class="headerlink" title="GPT2-ml 15亿参数 中文"></a>GPT2-ml 15亿参数 中文</h3><h4 id="人工编写：-4"><a href="#人工编写：-4" class="headerlink" title="人工编写："></a>人工编写：</h4><p><em>科学家在一个人迹罕至的山谷中发现了一群独角兽，它们能说流利的中文。</em></p><h4 id="AI续写"><a href="#AI续写" class="headerlink" title="AI续写"></a>AI续写</h4><p><em>科学家得出结论：这些独角兽可能是人类的祖先。通过对它们的dna分析，科学家 发现了它们的dna序列。独角兽生活在非洲索马里，经常在人的食物里下一粒肉。独角兽都是食肉目动物，因为只有食肉目动物才会保留大脑。约翰·霍普金 斯大学的卡夫卡博士在一篇论文中指出。但是，它们的非洲基因主要来自人类，但它们还有所不同。每年，这些可能出现在世界各地的独角兽大约可以延长至30亿年，而为了生存，一批批濒临灭绝的动物化石正在面临着灭绝的威胁。神秘物种：人类和独角兽之间的奇怪关系，从一个孤零零的动物园开始！它们可能很快就重现世界，而大部分的发现过程甚至都没有发生。人类和独角兽之间的奇怪关系，从一个孤零零的动物园开始！这是国际自然保护联盟发表的一份最新报告 ，宣称人类和独角兽之间的关系已经从极限运动，变成了生存竞赛。这个地球上几乎没有生物繁衍的能力，它们正面临灭绝的威胁。研究人员指出，在最新的研究中，他们发现了人类和独角兽之间一种基因突变大脑基因突变。这种突变可能是由dna和其他基因相互作用的结果。也就是说，造成这种基因突变的基因不是今天人类和其他生物基因中决定性的突变，而是早在古人类时期就已经存在了。当然，研究成果并不完全准确，却足以引起科学家的注意，因为在过去的四五十年中，科学家就发现了这一基因突变，此时科学家就已经确认了这个突变是多么重要，每一只独角兽都无法逃脱灭绝的命运。</em></p><h2 id="关于-GPT-2"><a href="#关于-GPT-2" class="headerlink" title="关于 GPT-2"></a>关于 GPT-2</h2><p>_以下为科普性质而非技术研究性质，如有不正确的地方请大佬指正_。</p><p>GPT-2 是基于 Transformer 的大型语言模型。与上一代模型GPT相比，它拥有10倍的参数和10倍的数据量。该模型不但可以生成文本的连贯段落，而且无需特殊训练就可以完成简单的阅读理解，翻译，问答和文本摘要。</p><p>就像我们带联想功能的输入法一样，GPT-2 预测下一个单词。</p><p><img src="%E8%BE%93%E5%85%A5%E6%B3%95.gif"></p><p>跟输入法不同的是，GPT-2 不是仅通过前一个字或词来预测，而是通过前面全文来预测。而且它具有巨大的数据集（大小为 40GB 的 800 万篇网页）。</p><p>GPT-2 将会为词表里的每个词计算一个概率，并选择概率最大（或从前几个中选取）的词作为输出。 它先将用户输入文本作为模型输入，每个单词产生后，会加在单词序列（文本）的最后，并将新序列作为模型的输入。这种机制叫做 自回归 （auto-regression） 。模型通过不断自回归，最终将输出一篇文章。</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>GPT-2 使用 Transformers 进行语言建模。 Transformer 是一个带有自注意力（ Self-Attention ）机制的自然语言模型。它由编码器（ Encoder ）、解码器（ Decoder ）堆叠而成。</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/gpt2-trial/GPT2%E7%BB%93%E6%9E%841.png"></p><p><em>Transformer 结构，图片引用自 <a href="https://jalammar.github.io/illustrated-transformer/">Jay Alammar : The Illustrated Transformer</a></em></p><p>在论文 「<a href="https://arxiv.org/pdf/1801.10198.pdf">Generating Wikipedia by Summarizing Long Sequences</a>」 中，提出了仅用 Transformer Decoder 构建语言模型。该模型通过去掉了 Encoder-Decoder Attention 层的 Decoder 堆叠而成。GPT-2 与之相似，越大的 GPT-2 模型需要的 Decoder 越多。</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/gpt2-trial/GPT2%E7%BB%93%E6%9E%842.png"></p><p><em>Transformer-Decoder 模型结构，图片引用自 <a href="https://jalammar.github.io/illustrated-gpt2/">Jay Alammar : The Illustrated GPT-2</a></em></p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/gpt2-trial/GPT2%E7%BB%93%E6%9E%843.png"></p><p><em>GPT-2 结构，图片引用自 <a href="https://jalammar.github.io/illustrated-gpt2/">Jay Alammar : The Illustrated GPT-2</a></em></p><p>Decoder 也分为 自注意力层（ Masked Self-Attention ）和 前馈神经网络（ Feed-Forward Neural Network ）两部分，其中 自注意力 负责在处理单词时关注序列中所有单词，对每个单词在语段中的相关度进行评分。</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/gpt2-trial/GPT2%E7%BB%93%E6%9E%844.png"></p><p><em>Decoder 结构 和 自注意力机制 的应用，图片引用自 <a href="https://jalammar.github.io/illustrated-gpt2/">Jay Alammar : The Illustrated GPT-2</a></em></p><h3 id="剩下还能再理解的一点点东西"><a href="#剩下还能再理解的一点点东西" class="headerlink" title="剩下还能再理解的一点点东西"></a>剩下还能再理解的一点点东西</h3><h4 id="词嵌入算法"><a href="#词嵌入算法" class="headerlink" title="词嵌入算法"></a>词嵌入算法</h4><p>模型输入的单词序列中每个单词输入第一个Decoder时，通过 词嵌入向量（Token Embedding） 将单词用数学方法表示。</p><ul><li>  模型训练的时候会生成一个 嵌入矩阵 （ Embedding Matrix ）。</li><li>  矩阵中每一行都是一个词嵌入向量。矩阵的行数为模型词汇表的长度，列数为每个词嵌入向量的维数。在GPT-2最大模型中，每个向量维数为1600。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/gpt2-trial/GPT2%E7%BB%93%E6%9E%845.png"></p><p><em>Embedding Matrix 结构，图片引用自 <a href="https://jalammar.github.io/illustrated-gpt2/">Jay Alammar : The Illustrated GPT-2</a></em></p><ul><li>  通过词嵌入向量还可以衡量两个单词的相关性，只需要通过计算两个词嵌入向量夹角即可。Similarity = cos(θ) .</li></ul><p>_毕竟还是高中生的底子，很多东西基础不行还是搞不定，以后看懂了再更。_（咕咕咕）</p><hr><p>参考资料：</p><p><a href="https://openai.com/blog/better-language-models/">OpenAI : Better Language Models and Their Implications</a></p><p><a href="https://openai.com/blog/language-unsupervised/">OpenAI : Improving Language Understanding with Unsupervised Learning</a></p><p><a href="https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">OpenAI : Language Models Are Unsupervised Multitask Learners</a></p><p><a href="https://jalammar.github.io/illustrated-gpt2/">Jay Alammar : The Illustrated GPT-2</a></p><p><a href="https://jalammar.github.io/illustrated-transformer/">Jay Alammar : The Illustrated Transformer</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在玩 OpenAI 的 &lt;a href=&quot;https://openai.com/blog/better-language-models/&quot;&gt;GPT-2&lt;/a&gt;。它是一种大型的基于 Transformer 的语言模型。OpenAI使用 15 亿参数和 800 万篇网络文本对其进行训练。训练后可以“ 根据文本中的所有先前单词，预测下一个单词”。它通过提示的小段文字来续写大段连贯文本。OpenAI 认为它生成的文本具有足够的欺骗性，可以“以假乱真”，以担心滥用为由迟迟不肯放出全部代码和模型，气得网友嘲讽其为 CloseAI 。&lt;/p&gt;
&lt;p&gt;(2020.6.25 更新，OpenAI 的 15 亿参数模型已放出，已经在橘子的实验室整理为 Colab 笔记本。)&lt;/p&gt;
&lt;p&gt;不过，目前 OpenAI 还是放出了部分代码和 7.74 亿参数的较小预训练模型。也有各路大佬复刻了 15 亿参数的&lt;a href=&quot;https://colab.research.google.com/drive/1esbpDOorf7DQJV8GXWON24c-EQrSKOit&quot;&gt;OpenGPT-2&lt;/a&gt;，以及支持中文的 &lt;a href=&quot;https://github.com/Morizeyao/GPT2-Chinese&quot;&gt;GPT2-Chinese&lt;/a&gt;、带有15亿参数中文预训练模型的 &lt;a href=&quot;https://github.com/imcaspar/gpt2-ml&quot;&gt;GPT2-ml&lt;/a&gt;。虽然效果或许没有 OpenAI 的 15 亿参数模型好，但也够我们玩一会了。想体验的可前往 &lt;a href=&quot;/laboratory/gpt-2&quot;&gt;橘子的实验室&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="信息技术" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="AI" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/AI/"/>
    
    
    <category term="AI技术" scheme="https://橘子.wang/tags/AI%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Google Colab 使用教程</title>
    <link href="https://橘子.wang/google-colab-tutorial/"/>
    <id>https://橘子.wang/google-colab-tutorial/</id>
    <published>2020-03-15T00:13:12.000Z</published>
    <updated>2021-01-29T10:26:59.990Z</updated>
    
    <content type="html"><![CDATA[<p>Google Colab 是 Google 的一项免费服务。借助 Colab ，我们可以在浏览器中编写和运行 Jupyter Notebook ，并使用云端计算资源。（Colab免费提供 Tesla T4 ，甚至还有 TPU 哇！）</p><p>要继续，请确认你可以正确访问Google。</p><span id="more"></span><h2 id="关于Colab"><a href="#关于Colab" class="headerlink" title="关于Colab"></a>关于Colab</h2><p>Colaboratory（简称Colab）是Google推出的一个免费的Jupyter笔记本环境，该环境在云中运行并将笔记本存储在Google Drive中。 在 Colab 中，任何人都可以通过浏览器编写和执行任意 Python 代码。它尤其适合机器学习、数据分析和教育目的。</p><p>Colab支持Python语言和Shell命令。Colab环境中不仅有常用的Python库，还带有Tensorflow、Keras 和 Pytorch等常用机器学习框架，无需配置环境就可以直接上手写代码啦。</p><h2 id="认识Colab界面"><a href="#认识Colab界面" class="headerlink" title="认识Colab界面"></a>认识Colab界面</h2><h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>Colab中笔记本界面大概长这样：</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A21.png"></p><p>如图，里面那一个个的小格子就是单元格啦。单元格里可以直接写Python代码，或者加上 ! 运行shell指令。选中一个代码单元格后，单元格的左上角会出现一个小按钮 ▶ ，点击可单独运行这个代码单元格内的代码。</p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>菜单栏大部分跟一个正常的文本编辑器相似，我们只需要关心 代码执行程序 就可以啦。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A22.png"></p><ul><li>  全部运行：从第一个单元格按顺序运行到最后一个单元格。</li><li>  运行光标所在的单元格：运行选中的单元格。</li><li>  运行所选单元格的内容：运行单元格中你选择的代码，没错就是你选择的，按下Ctrl+C就可以复制的那种。</li><li>  将该运行时恢复出厂设置：保留笔记本的代码，重置运行环境。会删除你的代码产生的文件，安装的库之类的。</li><li>  更改运行时类型：可以选择GPU或TPU作为硬件加速器，另外可以更改环境为Python2或者Python3，不过Python2很快就要停止支持了。</li><li>  管理会话：可以查看和管理你现在打开的会话。只有连接到运行环境后才产生会话。当代码不运行的时候可以用它及时终止会话。</li><li>  其它均为字面意思，不解释。</li></ul><p>此外在 工具——设置 里面可以修改编辑器的主题，还可以让你写代码的过程非常有威力或者吸引一些柯基和猫咪之类的(?)</p><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><ul><li>  第一项为目录，如果代码量大的话可以用来方便跳转。</li><li>  第二项为代码段，有一些写好的示例代码，不常用。</li><li>  第三项为文件，比较重要，连接到运行环境后可以显示和管理运行环境内的文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A23.png"></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="编写Python代码"><a href="#编写Python代码" class="headerlink" title="编写Python代码"></a>编写Python代码</h3><ul><li>  直接把代码写在单元格即可。</li><li>  需要调用的函数不一定要与调用函数的代码写在同一个单元格，但需要调用的函数所在单元格必须先运行。</li></ul><h3 id="编写Shell代码"><a href="#编写Shell代码" class="headerlink" title="编写Shell代码"></a>编写Shell代码</h3><ul><li>  写在单元格内并在每个语句前加上 ! 即可。</li><li>  另外 cd , ls 等命令执行加 %</li></ul><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A24.png"></p><h2 id="单元格输出"><a href="#单元格输出" class="headerlink" title="单元格输出"></a>单元格输出</h2><p>代码单元格运行后会产生输出。例如我们运行一下上面的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A25.png"></p><p>每个单元格下方就是该单元格的输出。在单元格运行的时候此区域也可以读取用户输入。比如说我们做一个简单的加法计算器。</p><p><img src="https://cdn.jsdelivr.net/gh/orange1423/wang.xn--i8sr36a@master/google-colab-tutorial/Colab%E7%95%8C%E9%9D%A26.gif"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Google Colab 是 Google 的一项免费服务。借助 Colab ，我们可以在浏览器中编写和运行 Jupyter Notebook ，并使用云端计算资源。（Colab免费提供 Tesla T4 ，甚至还有 TPU 哇！）&lt;/p&gt;
&lt;p&gt;要继续，请确认你可以正确访问Google。&lt;/p&gt;</summary>
    
    
    
    <category term="信息技术" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="编程" scheme="https://橘子.wang/categories/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="软件技术" scheme="https://橘子.wang/tags/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>【工程分享】醉诗仙 PV</title>
    <link href="https://橘子.wang/pv-zuishixian/"/>
    <id>https://橘子.wang/pv-zuishixian/</id>
    <published>2019-10-20T01:00:47.000Z</published>
    <updated>2021-04-05T03:47:38.240Z</updated>
    
    <content type="html"><![CDATA[<p>这是暑假的时候<a href="https://space.bilibili.com/30260188">仙豆围</a><a href="https://space.bilibili.com/30260188">鏡</a>、Noah-nono 和我一起做的，写给尘宝的生贺~</p><p>调教是仙豆围鏡，曲绘是 Noah-nono，我做了 PV~</p><p>经常看到编程开源的，调教放有参工程的，但似乎很少看到 PV 放工程文件的。</p><p>现在我就在这里分享一下工程文件吧，授权见文章末尾。</p><p>PV工程文件版本为 AE CC 2019，使用了一些常用插件如红巨星的 Particular。</p><span id="more"></span><h2 id="先展示一下成品"><a href="#先展示一下成品" class="headerlink" title="先展示一下成品~"></a>先展示一下成品~</h2><p><a href="https://www.bilibili.com/video/av63376136">快戳我快戳我ヾ(≧▽≦*)o</a></p><style>.video {position: relative;padding-bottom: 56.25%;height: 0;overflow: hidden;}.video iframe,.video object,.video embed {position: absolute;top: 0;left: 0;width: 100%;height: 100%;}</style><p class="video"><iframe src="//player.bilibili.com/player.html?aid=63376136&amp;cid=110715140&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p><p>也请大家支持一下哦 (●’◡’●)</p><h2 id="接着就是工程文件啦"><a href="#接着就是工程文件啦" class="headerlink" title="接着就是工程文件啦"></a>接着就是工程文件啦</h2><p><a href="https://文件.橘子.wang/%E5%B7%A5%E7%A8%8B/%E9%86%89%E8%AF%97%E4%BB%99PV%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.zip">直链</a></p><p><a href="https://pan.baidu.com/s/1vHQwMbPrs11AyPN5T4eQWw&shfl=shareset">度娘网盘</a> 提取码: hg7y</p><h2 id="PV部分授权"><a href="#PV部分授权" class="headerlink" title="PV部分授权"></a>PV部分授权</h2><p>这里的授权不包括使用的任何素材。素材大部分来源于网络，仅供参考，请勿商用。音频使用请找<a href="https://space.bilibili.com/30260188">仙豆围镜</a>，曲绘使用请找 Noah-nono。</p><p><a href="http://creativecommons.org/licenses/by/4.0/">知识共享署名 4.0 国际许可协议</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是暑假的时候&lt;a href=&quot;https://space.bilibili.com/30260188&quot;&gt;仙豆围&lt;/a&gt;&lt;a href=&quot;https://space.bilibili.com/30260188&quot;&gt;鏡&lt;/a&gt;、Noah-nono 和我一起做的，写给尘宝的生贺~&lt;/p&gt;
&lt;p&gt;调教是仙豆围鏡，曲绘是 Noah-nono，我做了 PV~&lt;/p&gt;
&lt;p&gt;经常看到编程开源的，调教放有参工程的，但似乎很少看到 PV 放工程文件的。&lt;/p&gt;
&lt;p&gt;现在我就在这里分享一下工程文件吧，授权见文章末尾。&lt;/p&gt;
&lt;p&gt;PV工程文件版本为 AE CC 2019，使用了一些常用插件如红巨星的 Particular。&lt;/p&gt;</summary>
    
    
    
    <category term="Vocaloid" scheme="https://橘子.wang/categories/Vocaloid/"/>
    
    <category term="PV" scheme="https://橘子.wang/categories/Vocaloid/PV/"/>
    
    
    <category term="作品展示" scheme="https://橘子.wang/tags/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
    <category term="工程分享" scheme="https://橘子.wang/tags/%E5%B7%A5%E7%A8%8B%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
